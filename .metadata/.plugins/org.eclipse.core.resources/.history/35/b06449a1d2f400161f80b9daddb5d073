import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Random;

public class EfficientWordMarkov implements MarkovInterface<WordGram> {
	private String[] myText;
	private Random myRandom;
	private int myOrder;
	HashMap<Integer, ArrayList<String>> wordMap = new HashMap<>();
	
	private static String PSEUDO_EOS = "";
	private static long RANDOM_SEED = 0;
	
	public EfficientWordMarkov(int order) {
		myRandom = new Random(RANDOM_SEED);
		myOrder = order;
	}

	public void setTraining(String text) {
		myText = text.split("\\s+");
	}

	public String getRandomText(int length) {
		StringBuilder output_string = new StringBuilder();		
		int index = myRandom.nextInt(myText.length - myOrder);
		WordGram current = new WordGram(myText, index, myOrder);
		appeand_word_gram(output_string, current);
		for (int idx = 0; idx < length-myOrder; idx += 1)
		{
			ArrayList<String> current_follows = getFollows(current);
			if (current_follows.size() == 0)
			{
				break;
			}
			index = myRandom.nextInt(current_follows.size());
			String next_word = current_follows.get(index);
			output_string.append(next_word);
			output_string.append(" ");
			current = current.shiftAdd(next_word);
		}
		return output_string.toString().trim();
	}

	public ArrayList<String> getFollows(WordGram key) {
		int key_value = key.hashCode();
		if (!wordMap.containsKey(key_value))
		{	
			String head_word = key.get_word()[0];
			int key_len = key.length();
			int pos = 0;
			ArrayList<String> myText_array = new ArrayList<>(Arrays.asList(myText));
			ArrayList<String> to_add = new ArrayList<>();
			while (pos < myText_array.size())
			{	
				ArrayList<String> search_region = new ArrayList<>(myText_array.subList(pos, myText_array.size()));
				int start = search_region.indexOf(head_word);
				if (start == -1)
				{
					break;
				}
				if ((pos + start + key_len) >= myText.length)
				{
					to_add.add(PSEUDO_EOS);
					break;
				}
				WordGram current_word_gram = new WordGram(myText, pos+start, key_len);
				if (key.equals(current_word_gram))
				{
					String to_add_word = myText[pos+start+key_len];
					to_add.add(to_add_word);
					pos += start+1;
				}
				else
				{
					pos += start+1;
				}
			}
			wordMap.put(key_value, to_add);
			return to_add;
		}
		else
		{
			return wordMap.get(key_value);
		}
	}
	
	
	private void appeand_word_gram(StringBuilder input_string_builder, WordGram input_word_gram)
	{
		String[] all_word = input_word_gram.get_word();
		for (String each_word: all_word)
		{
			input_string_builder.append(each_word);
			input_string_builder.append(" ");
		}
	}
	
	public int getSize()
	{
		return myText.length;
	}
	
	public int getOrder() {
		// TODO Auto-generated method stub
		return myOrder;
	}

	public void setSeed(long seed) {
		// TODO Auto-generated method stub
		RANDOM_SEED = seed;
		myRandom = new Random(RANDOM_SEED);	
	}
	
	public int mapSize()
	{
		return wordMap.size();
	}
}
